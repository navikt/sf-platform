name: "Commit files"
description: "Commit files to the repository"
inputs:
  files:
    description: "List of filenames with path to the files to commit, separated by a comma"
    required: true
  commitMessage:
    description: "Commit message"
    default: "Commit from bot"
    required: true
  token:
    description: "GitHub token"
    required: true
runs:
  using: "composite"
  steps:
    - name: Commit
      shell: bash
      run: |
        printf -v red '\033[0;31m'
        printf -v yellow '\033[0;33m'
        printf -v green '\033[0;32m'
        printf -v bold '\033[1m'
        printf -v reset '\033[0m'

        # Split the files into an array
        IFS=',' read -ra FILES <<< "$FILES"

        # Check if the file paths contain commas
        for file in "${FILES[@]}"; do
          if [[ "$file" == *","* ]]; then
            echo "::error::File paths should not contain commas. Found in: $file"
            exit 1
          fi
        done

        echo "::group::Commit files"
        echo "Files to commit: ${FILES[@]}"
        echo "Commit message: $COMMIT_MESSAGE"

        # Check if there are files to commit
        if [ ${#FILES[@]} -gt 0 ]; then
          # Prepare the JSON payload
          if ! JSON_PAYLOAD=$(jq -n \
          --arg query "$(cat .github/api/createCommitOnBranch.gql)" \
          --arg repo "$REPOSITORY" \
          --arg branch "$REF_NAME" \
          --arg head "$(git rev-parse HEAD)" \
          --arg message "$COMMIT_MESSAGE" \
          '{query: $query, variables: {githubRepository: $repo, branchName: $branch, expectedHeadOid: $head, commitMessage: $message, files: []}}'); then
            echo "::error::Failed to prepare JSON payload."
            exit 1
          fi

          # Add the files to the JSON payload
          FILES_ARRAY=$(jq -n)
          for file in "${FILES[@]}"; do
            if [ -f "$file" ] && [ -r "$file" ]; then
              base64_content=$(base64 -w0 "$file")
              FILES_ARRAY=$(echo "$FILES_ARRAY" | jq --arg path "$file" --arg content "$base64_content" '. + [{"path": $path, "contents": $content}]')
              echo "${green}Adding $file to commit.${reset}"
            else
              echo "::warning ::${red}File $file does not exist, skipping.${reset}"
            fi
          done

          if [ ${#FILES_ARRAY[@]} -le 0 ]; then
            echo "::error::No files to commit."
            exit 1
          fi

          # Add the files array to the JSON payload
          JSON_PAYLOAD=$(echo "$JSON_PAYLOAD" | jq --argjson files "$FILES_ARRAY" '.variables.files |= $files')

          echo "${green}${bold}Executing GraphQL query via curl:${reset} ${yellow}curl --silent --show-error -X POST -H 'Authorization: bearer ***' -H 'Content-Type: application/json' -d '$JSON_PAYLOAD' https://api.github.com/graphql${reset}"

          # Actually execute the curl command
          if ! curl_output=$(curl --silent --show-error -X POST \
            -H 'Authorization: token ${GITHUB_TOKEN}' \
            -H 'Content-Type: application/json' \
            -d "$JSON_PAYLOAD" \
            https://api.github.com/graphql 2>&1); then
              echo "::error title=Failed to commit changes.::Curl output: $curl_output"
              exit 1
          fi

          echo "GitHub API response: $curl_output"
        else
          echo "::warning::No files to commit."
        fi
        echo "::endgroup::"
      env:
        REPOSITORY: ${{ github.repository }}
        REF_NAME: ${{ github.ref_name }}
        FILES: ${{ inputs.files }}
        COMMIT_MESSAGE: ${{ inputs.commitMessage }}
        GITHUB_TOKEN: ${{ inputs.token }}
