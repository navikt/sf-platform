name: ON PUSH OR PR FEATURE BRANCH
run-name:
on:
  push:
    branches-ignore:
      - main
    paths:
      - "src/**"
  pull_request:
    types: [opened, ready_for_review, reopened]
    paths:
      - "src/**"
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
jobs:
  staticCodeValidation:
    name: Validation jobs
    uses: navikt/sf-platform/.github/workflows/ciStaticCodeValidation.yml@main
    permissions:
      contents: read
      security-events: write

  # Detect changes in the src directory
  # The job is executed on the ubuntu-latest runner
  # It runs after the staticCodeValidation job
  checkChanges:
    name: Check changes
    runs-on: ubuntu-latest
    outputs:
      hasSrcChanges: ${{ steps.checkChanges.outputs.hasSrcChanges }}
    permissions:
      contents: read
    steps:
      # Checkout the repository
      - name: "Checkout"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          fetch-depth: 0
          persist-credentials: false

      # Check for changes in the src directory excluding .md files
      - uses: navikt/sf-platform/.github/actions/checkForPackageChanges@cdc0fe1ab477cdf5c025f6591f9da7601e3914f1
        id: checkChanges

  # Validate changes
  # The job is executed on the ubuntu-latest runner in a container with the SFP CLI installed
  # It runs after the checkChanges job and only if there are changes to the packages detected
  # It uses the SFP CLI to validate the changes
  # It also handles the case where the validation fails and deletes the scratch org
  # It uploads the build artifacts and logs generated during the validation process
  validateChanges:
    name: Validate changes
    needs: ["checkChanges", "staticCodeValidation"]
    if: ${{ github.event_name == 'workflow_dispatch' || needs.checkChanges.outputs.hasSrcChanges == 'true' }}
    runs-on: ubuntu-latest
    container: ghcr.io/flxbl-io/sfp:${{ vars.SFP_CONTAINER_VERSION }}
    permissions:
      contents: write
      packages: write
      pull-requests: write
    env:
      POOLS: ${{ vars.DEFAULT_CI_POOL }}
      DEVHUB_ALIAS: "devhub"
      COVERAGE_PERCENT: ${{ vars.CODE_COVERAGE_PERCENTAGE }}
      SFP_LOG_LEVEL: ${{ vars.SFP_LOG_LEVEL }}
      EVENT: ${{ github.event_name }}
      GH_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      PULL_REQUEST_ID: ${{ github.event.pull_request.node_id }}
    steps:
      # Checkout the repository
      - name: "Checkout"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          fetch-depth: 0
          persist-credentials: true

      # Authenticate with DevHub
      - name: Authenticate DevHub
        uses: navikt/sf-gha-authenticateOrg@da2f995ee865e05111574719abfc5ba12b459f0c
        with:
          auth-url: ${{ secrets.SF_DEVHUB_URL }}
          alias: "devhub"
          setDefaultDevhubUsername: "true"

      # Quickbuild on push
      # This step is only executed on push events
      - name: "Quickbuild package"
        id: quickbuildPackage
        if: ${{ env.EVENT == 'push' }}
        shell: bash
        run: |
          sfp quickbuild --devhubalias devhub --diffcheck --buildnumber ${GITHUB_RUN_ID} --branch ${GITHUB_REF#refs/heads/} --loglevel ${SFP_LOG_LEVEL}

      # Validate against CI Pool
      # This step is only executed on pull_request events
      # It validates the changes against the CI pool
      # and deletes the scratch org after validation
      # It also handles the case where the validation fails
      # and deletes the scratch org
      - name: "Validate against CI Pool"
        if: ${{ env.EVENT == 'pull_request' || env.EVENT == 'workflow_dispatch' }}
        run: |
          command=("sfp" "validate" "pool")
          command+=("--pools" "${POOLS}")
          command+=("--targetdevhubusername" "${DEVHUB_ALIAS}")
          command+=("--mode" "${MODE}")
          command+=("--logsgroupsymbol" "::group::,::endgroup::")
          command+=("--loglevel" "${SFP_LOG_LEVEL}")

          if [ "${COVERAGE_PERCENT}" ]; then
            command+=("--coveragepercent" "${COVERAGE_PERCENT}")
          fi

          if [ "${REF}" ]; then
            command+=( "--ref" "${REF}" )
          fi

          if [ "${BASE_REF}" ]; then
            command+=( "--baseRef" "${BASE_REF}" )
          fi

          if [ "${DELETE_SCRATCH}" == "true" ]; then
            command+=("--deletescratchorg")
          fi

          echo "Executing command: ${command[*]}"
          "${command[@]}"
        env:
          MODE: "thorough"
          REF: ${{ github.event.pull_request.head.sha }}
          BASE_REF: ${{ github.event.pull_request.base.sha }}
          DELETE_SCRATCH: "true"

      # Delete the scratch org if the validation fails
      # This step is only executed if the validation fails
      # It deletes the default scratch org to clean up resources
      # and prevent stale orgs from accumulating
      # It uses the sf org delete command with the -p flag
      # to delete the scratch org without confirmation
      - name: Delete Stale Validation Org
        if: ${{ failure() }}
        run: |
          if sf org list --json | jq -e '.result[] | select(.isDefaultUsername == true)' > /dev/null; then
            sf org delete scratch --no-prompt
          fi

      - name: Set pull request to draft
        if: ${{ failure() && github.event_name == 'pull_request' }}
        run: |
          # Prepare the JSON payload
          if ! JSON_PAYLOAD=$(jq -n \
            --arg query "$(cat .github/api/convertPullRequestToDraft.gql)" \
            --arg pullRequestId "$PULL_REQUEST_ID" \
            '{query: $query, variables: {pullRequestId: $pullRequestId}}'); then
            echo "::error::Failed to prepare JSON payload."
            exit 1
          fi

          echo "JSON payload: $JSON_PAYLOAD"

          curl_output=$(curl --silent --show-error -X POST \
            -H "Authorization: token ${GH_AUTH_TOKEN}" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD" \
            https://api.github.com/graphql 2>&1)

          # Check if the curl command was successful 
          if [ $? -ne 0 ] || ! echo "$curl_output" | grep -q '"isDraft"'; then
            echo "::error title=Failed to set Pull request as draft.::Curl output: $curl_output"
            exit 1
          fi

          echo "GitHub API response: $curl_output"

      # Upload build artifacts and logs if present
      # This step is executed regardless of the outcome of the previous steps
      # It uploads the artifacts and logs generated during the build process
      # It uses the navikt/sf-platform action to upload the artifacts and logs
      # The artifacts are uploaded with the name "build-artifacts"
      # The logs are uploaded with the name "build-logs"
      - name: Upload artifacts and logs
        if: always()
        uses: navikt/sf-platform/.github/actions/uploadWorkflowArtifactsAndLogs@cdc0fe1ab477cdf5c025f6591f9da7601e3914f1
        with:
          artifactName: "build-artifacts"
          uploadArtifacts: true
          logName: "build-logs"
          publishLogs: true
