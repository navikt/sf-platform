name: Replenish platform pools
on:
  workflow_call:
    inputs:
      gitRef:
        description: Commit Id from where the pools should be created
        required: false
        default: main
        type: string
      poolMatrixDefPath:
        description: Path to the file describing the pools to create
        required: true
        type: string
      clearPools:
        description: If checked, clear unused scratches in the pools
        required: true
        type: boolean
    secrets:
      METRICS_KEYS:
        required: true
      SF_DEVHUB_URL:
        required: true

  workflow_dispatch:
    inputs:
      gitRef:
        description: Commit Id from where the pools should be created
        required: false
        default: main
      poolMatrixDefPath:
        description: Path to the file describing the pools to create
        required: true
        default: config/poolMatrixdef.json
      clearPools:
        description: If checked, clear unused scratches in the pools
        required: true
        default: "false"

jobs:
  checkScratchLimitsThreshold:
    name: Check Scratch limits
    runs-on: ubuntu-latest
    permissions: {}
    outputs:
      canReplenishPool: ${{ steps.checkLimits.outputs.canReplenishPool }}
    steps:
      - name: Setup SF CLI
        uses: navikt/sf-platform/.github/actions/installSfCli@7bc720106cdadde69c31f5d7d8ff1f8d6b790d54
        with:
          version: ${{ vars.SF_CLI_VERSION }}

      - name: Authenticate Dev Hub
        uses: navikt/sf-gha-authenticateOrg@da2f995ee865e05111574719abfc5ba12b459f0c
        with:
          auth-url: ${{ secrets.SF_DEVHUB_URL }}
          alias: devhub

      - name: Check scratch org limits
        id: checkLimits
        run: |
          printf 'get org limits...\n' >&2
          sf org list limits --target-org devhub --json >> limits.json

          remainingDailyScratchOrgs=$(jq '.result[] | select(.name=="DailyScratchOrgs").remaining' limits.json)
          maxDailyScratchOrgs=$(jq '.result[] | select(.name=="DailyScratchOrgs").max' limits.json)
          remainingActiveScratchOrgs=$(jq '.result[] | select(.name=="ActiveScratchOrgs").remaining' limits.json)
          maxActiveScratchOrgs=$(jq '.result[] | select(.name=="ActiveScratchOrgs").max' limits.json)

          rm limits.json

          echo "canReplenishPool=true" >> "$GITHUB_OUTPUT"

          printf 'Check remaining daily scratch orgs\n' >&2
          if [ $remainingDailyScratchOrgs -lt $POOL_REMAINING_DAILY_SCRATCH_ORG_LIMIT ]; then
            echo "::warning title=Too few remaining daily scratch orgs::Max daily scatch orgs: $maxDailyScratchOrgs. Remaining daily scratch orgs: $remainingDailyScratchOrgs. Threshold: $POOL_REMAINING_DAILY_SCRATCH_ORG_LIMIT."
            echo "canReplenishPool=false" >> "$GITHUB_OUTPUT"
          fi

          printf 'Check remaining active scratch orgs\n' >&2
          if [ $remainingActiveScratchOrgs -lt $POOL_REMAINING_ACTIVE_SCRATCH_ORG_LIMIT ]; then
            echo "::warning title=Too many active Scratch Orgs::Max active scratch orgs: $maxActiveScratchOrgs. Remaining scratch orgs: $remainingActiveScratchOrgs. Threshold: $POOL_REMAINING_ACTIVE_SCRATCH_ORG_LIMIT."
            echo "canReplenishPool=false" >> "$GITHUB_OUTPUT"
          fi

  pushPoolListMetrics:
    runs-on: ubuntu-latest
    container: ghcr.io/flxbl-io/sfp:${{ vars.SFP_CONTAINER_VERSION }}
    timeout-minutes: 720 #Set to Maximum Time out
    permissions:
      contents: read
      packages: read
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          ref: ${{ inputs.gitRef }}
          fetch-depth: 0
          persist-credentials: false
      - name: Authenticate Dev Hub
        uses: navikt/sf-gha-authenticateOrg@da2f995ee865e05111574719abfc5ba12b459f0c
        with:
          auth-url: ${{ secrets.SF_DEVHUB_URL }}
          alias: devhub
      - name: Push pool list metrics
        id: pushPoolListMetrics
        run: |
          echo "METRICSKEY len: ${#METRICSKEY}"
          keyfile=$(mktemp) || exit 1
          cat > "$keyfile" <<< "$METRICSKEY"
          msg=$(sfp pool list --targetdevhubusername=devhub --json |
            jq -r '.scratchOrgDetails |
            group_by(.tag, .status)[] |
            "scratch_org_status{instance=\"devhub\",tag=\"\(.[0].tag)\",status=\"\(.[0].status)\"} \(length)"')
          echo "got some stats: $msg"
          sig=$(printf %s "$msg" | openssl dgst -sha256 -sign "$keyfile" -out - | base64 -w0)
          jq --compact-output --null-input \
            --arg msg "$msg" \
            --arg runner sf-platform \
            --arg sig "$sig" \
            '{"runner":$runner,"metrics":$msg,"signature":$sig}' |
            tee >(curl -D- -H 'Content-Type: application/json' --data-binary @- \
              https://sf-github-metrics.ekstern.dev.nav.no/measures/job/sfplatform)
        env:
          METRICSKEY: ${{ secrets.METRICS_KEYS }}

  prepareMatrix:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      matrixJson: ${{ steps.getMatrix.outputs.matrixJson }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          ref: ${{ inputs.gitRef }}
          persist-credentials: false

      - id: getMatrix
        run: |
          content=$(jq --compact-output '.' "$POOL_MATRIX_DEF_PATH")
          echo "matrixJson=$content" >> "$GITHUB_OUTPUT"
        env:
          POOL_MATRIX_DEF_PATH: ${{ inputs.poolMatrixDefPath }}

  createPool:
    name: Replenish Pool
    needs: [prepareMatrix, checkScratchLimitsThreshold]
    if: needs.checkScratchLimitsThreshold.outputs.canReplenishPool
    runs-on: ubuntu-latest
    container: ghcr.io/flxbl-io/sfp:${{ vars.SFP_CONTAINER_VERSION }}
    timeout-minutes: 720 #Set to Maximum Time out
    strategy:
      matrix:
        pool: ${{ fromJson(needs.prepareMatrix.outputs.matrixJson).pools }}
    permissions:
      contents: read
      packages: read
    env:
      POOL_TAG: ""

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          ref: ${{ inputs.gitRef }}
          fetch-depth: 0
          persist-credentials: false

      - name: Set pool tag
        run: |
          pooltag=$(jq --raw-output '.tag' ${{ matrix.pool.poolConfigPath }})
          echo "POOL_TAG=$pooltag" >> $GITHUB_ENV

      - name: Print Values
        run: |
          echo Pool Tag: "$POOL_TAG"
          echo Pool Config Path: ${{ matrix.pool.poolConfigPath }}
          echo Pool Delete Job Type: ${{ matrix.pool.deleteJobType }}
          echo Clear unused scratch orgs: "$CLEAR_POOLS"
        env:
          CLEAR_POOLS: ${{ inputs.clearPools }}

      - name: Authenticate Dev Hub
        uses: navikt/sf-gha-authenticateOrg@da2f995ee865e05111574719abfc5ba12b459f0c
        with:
          auth-url: ${{ secrets.SF_DEVHUB_URL }}
          alias: devhub

      - name: Clear pool
        id: clearPool
        if: ${{ inputs.clearPools }}
        uses: navikt/sf-gha-deleteScratchPool@1f0986d2312a2969e658946acb496f6dcd7d4032
        with:
          devhub: devhub
          poolTag: ${{ env.POOL_TAG }}
          deleteJobType: ${{ matrix.pool.deleteJobType }}
          isCiPool: ${{ matrix.pool.isCiPool }}

      - name: Create Pool
        run: |
          sfp pool prepare --poolconfig "${{ matrix.pool.poolConfigPath }}" --targetdevhubusername devhub
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete orphans
        uses: navikt/sf-gha-deleteScratchPool@1f0986d2312a2969e658946acb496f6dcd7d4032
        with:
          devhub: devhub
          deleteJobType: orphans
          isCiPool: ${{ matrix.pool.isCiPool }}

      - name: Push logged metrics
        uses: navikt/sf-platform/.github/actions/pushLoggedMetrics@main
        with:
          metricsKey: ${{ secrets.METRICS_KEYS }}
