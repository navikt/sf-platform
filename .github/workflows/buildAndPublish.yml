name: "Build and Publish"
on:
  workflow_call:
    secrets:
      SF_DEVHUB_URL:
        required: true
  push:
    branches:
      - main
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
jobs:
  staticCodeValidation:
    name: Validation jobs
    uses: navikt/sf-platform/.github/workflows/ciStaticCodeValidation.yml@main
    permissions:
      contents: read

  checkChanges:
    name: Check changes
    needs: staticCodeValidation
    runs-on: ubuntu-latest
    outputs:
      hasSrcChanges: ${{ steps.checkChanges.outputs.hasSrcChanges }}
    permissions:
      contents: read
    steps:
      - name: "Checkout"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          fetch-depth: 0
          persist-credentials: false

      - uses: navikt/sf-platform/.github/actions/checkForPackageChanges@78017e59a7badfdcfc9c30abfae48e8feb54f468
        id: checkChanges

  buildAndPublish:
    name: Build and Publish
    needs: checkChanges
    if: ${{ github.event_name == 'workflow_dispatch' || needs.checkChanges.outputs.hasSrcChanges == 'true' }}
    runs-on: ubuntu-latest
    container: ghcr.io/flxbl-io/sfp:${{ vars.SFP_CONTAINER_VERSION }}
    permissions:
      contents: write
      packages: write
    steps:
      - name: "Checkout"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Authenticate node
        uses: actions/setup-node@v4
        with:
          registry-url: "https://npm.pkg.github.com"

      - name: Authenticate DevHub
        uses: navikt/sf-platform/.github/actions/authenticateOrg@78017e59a7badfdcfc9c30abfae48e8feb54f468
        with:
          auth-url: ${{ secrets.SF_DEVHUB_URL }}
          alias: "devhub"
          setDefaultDevhubUsername: "true"

      - name: Build
        run: |
          sfp build --devhubalias devhub --diffcheck --buildnumber ${GITHUB_RUN_ID} --branch main --releaseconfig config/releaseConfig.yml --loglevel ${SFP_LOG_LEVEL}
          if [ -d "artifacts" ] && [ -n "$(ls -A artifacts)" ]; then
            echo "Artifacts found"
          else
            echo "No artifacts found"
          fi
        env:
          SFP_LOG_LEVEL: ${{ vars.SFP_LOG_LEVEL }}

      - name: Publish artifacts
        run: |
          if [ -d "artifacts" ] && [ -n "$(ls -A artifacts)" ]; then
            sfp publish --artifactdir artifacts --npm --scope @${SCOPE} --devhubalias devhub --loglevel ${SFP_LOG_LEVEL} --gittag --pushgittag --logsgroupsymbol ::group::,::endgroup::
          else
            echo "No artifacts to publish"
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SFP_LOG_LEVEL: ${{ vars.SFP_LOG_LEVEL }}
          SCOPE: ${{ github.repository_owner }}

      - name: Generate Release Name
        id: generate_name
        run: |
          echo "releaseName=sf-platform_$(date +%s%3N)" >> $GITHUB_OUTPUT

      - name: Generate release definition and change log
        run: |
          sfp releasedefinition generate \
            --gitref ${GIT_REF} \
            --configfile ${PATH_TO_CONFIG_FILE} \
            --releasename ${RELEASE_NAME} \
            --directory ${DIRECTORY} \
            --branchname ${BRANCH_NAME} \
            --loglevel ${SFP_LOG_LEVEL} \
          | sed 's/\x1b\[[0-9;]*m//g' \
          | awk '/^release:/,0' > releases/${RELEASE_NAME}/${RELEASE_NAME}.yaml

          path=$(sfp changelog generate --branchname main --releasename ${RELEASE_NAME} --workitemfilter PTCRM-[0-9] --nopush --directory changelog | grep -oP 'Copying the repository to \K[^ ]+' | head -1)

          if [ -n "$path" ] && [ -d "$path/changelog" ]; then
            mkdir -p releases/${RELEASE_NAME}
            cp "$path/changelog"/* releases/${RELEASE_NAME}/
          else
              echo "Error: Path not set or directory does not exist"
          fi
        env:
          GIT_REF: ${{ github.sha }}
          PATH_TO_CONFIG_FILE: "config/releaseConfig.yml"
          RELEASE_NAME: ${{ steps.generate_name.outputs.releaseName }}
          BRANCH_NAME: ${{ github.ref_name }}
          SFP_LOG_LEVEL: ${{ vars.SFP_LOG_LEVEL }}

      - name: Commit release files
        uses: navikt/sf-platform/.github/actions/commitFiles@78017e59a7badfdcfc9c30abfae48e8feb54f468
        with:
          files: "releases/${{ steps.generate_name.outputs.releaseName }}/${{ steps.generate_name.outputs.releaseName }}.yml releases/${{ steps.generate_name.outputs.releaseName }}/Release-Changelog.md"

      - name: Create Github Release
        run: |
          gh release create ${RELEASE_NAME} releases/${RELEASE_NAME}/${RELEASE_NAME}.yaml --notes-file releases/${RELEASE_NAME}/Release-Changelog.md --title ${RELEASE_NAME}
        env:
          RELEASE_NAME: ${{ steps.generate_name.outputs.releaseName }}

      - name: Upload artifacts and logs
        if: always()
        uses: navikt/sf-platform/.github/actions/uploadWorkflowArtifactsAndLogs@78017e59a7badfdcfc9c30abfae48e8feb54f468
        with:
          artifactName: "build-artifacts"
          uploadArtifacts: true
          logName: "build-logs"
          publishLogs: true
