# Workflow: Build and Publish
# Purpose: Builds Salesforce packages, publishes artifacts, generates release files, and creates a GitHub release.
# Triggers: Manual (workflow_dispatch) or push to main with source changes.
# Notes: Skips publishing and release steps if no artifacts are generated during build. Runs in a single job to minimize container spin-up overhead.
name: "Build and Publish"
on:
  workflow_call:
    secrets:
      SF_DEVHUB_URL:
        required: true
        description: "Salesforce DevHub authentication URL"
  push:
    branches:
      - main
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}

jobs:
  staticCodeValidation:
    name: Validation Jobs
    uses: navikt/sf-platform/.github/workflows/ciStaticCodeValidation.yml@main
    permissions:
      contents: read

  detectPackageChanges:
    name: Detect Package Changes
    needs: staticCodeValidation
    runs-on: ubuntu-latest
    outputs:
      hasSrcChanges: ${{ steps.checkChanges.outputs.hasSrcChanges || 'false' }}
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          fetch-depth: 0 # Full history needed for change detection
          persist-credentials: false

      # Check for changes in the src directory
      - uses: navikt/sf-platform/.github/actions/checkForPackageChanges@841af76d24d68afd9f885e5027be8b0753ee054e
        id: checkChanges

  createReleaseName:
    name: Create Release Name
    runs-on: ubuntu-latest
    permissions: {} # No permissions needed}
    outputs:
      releaseName: ${{ steps.createReleaseName.outputs.releaseName }}
    steps:
      - name: Set Release Name
        id: createReleaseName
        run: |
          echo "releaseName=sf-platform_$(date +%s%3N)" >> "$GITHUB_OUTPUT"

  buildAndPublish:
    name: Build and Publish
    needs: [detectPackageChanges, createReleaseName]
    if: ${{ github.event_name == 'workflow_dispatch' || needs.detectPackageChanges.outputs.hasSrcChanges == 'true' }}
    runs-on: ubuntu-latest
    container: ghcr.io/flxbl-io/sfp:${{ vars.SFP_CONTAINER_VERSION || 'latest' }}
    permissions:
      contents: write
      packages: write
    env:
      SFP_LOG_LEVEL: ${{ vars.SFP_LOG_LEVEL || 'INFO' }}
      GH_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SCOPE: ${{ github.repository_owner }}
      PATH_TO_CONFIG_FILE: "config/releaseConfig.yml"
      RELEASE_NAME: ${{ needs.createReleaseName.outputs.releaseName }}
      GIT_REF: ${{ github.sha }}
      BRANCH_NAME: ${{ github.ref_name }}
      WORKITEM_FILTER: ${{ vars.WORKITEM_FILTER || 'PTCRM-[0-9]' }}
      NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          fetch-depth: 0 # Full history for release definition and changelog
          persist-credentials: true

      - name: Authenticate Node
        uses: actions/setup-node@v4
        with:
          registry-url: "https://npm.pkg.github.com"

      # Sets up Salesforce CLI authentication for the DevHub
      - name: Authenticate DevHub
        uses: navikt/sf-platform/.github/actions/authenticateOrg@841af76d24d68afd9f885e5027be8b0753ee054e
        with:
          auth-url: ${{ secrets.SF_DEVHUB_URL }}
          alias: "devhub"
          setDefaultDevhubUsername: "true"

      - name: Build
        id: build
        run: |
          echo "::group::Running sfp build"
          if sfp build \
            --devhubalias devhub \
            --diffcheck \
            --buildnumber "${GITHUB_RUN_ID}" \
            --branch main \
            --releaseconfig "${PATH_TO_CONFIG_FILE}" \
            --loglevel "${SFP_LOG_LEVEL}" \
            2>&1; then
            
            # Check if artifacts were generated
            if [ -d "artifacts" ] && [ -n "$(ls -A artifacts)" ]; then
              echo "Artifacts found"
              echo "artifactsFound=true" >> "$GITHUB_OUTPUT"
            else
              echo "::warning::No artifacts found after running Build step."
              echo "artifactsFound=false" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "::error::Build command failed"
            echo "artifactsFound=false" >> "$GITHUB_OUTPUT"
            exit 1
          fi
          echo "::endgroup::"

      - name: Publish Artifacts
        if: steps.build.outputs.artifactsFound == 'true'
        run: |
          echo "::group::Publishing artifacts"

          sfp publish \
            --artifactdir artifacts \
            --npm \
            --scope "@${SCOPE}" \
            --devhubalias devhub \
            --loglevel "${SFP_LOG_LEVEL}" \
            --gittag \
            --pushgittag \
            --logsgroupsymbol ::group::,::endgroup:: \
          || { echo "::error::Publish failed"; exit 1; }

          echo "::endgroup::"

      - name: Generate Release Definition and Changelog
        if: steps.build.outputs.artifactsFound == 'true'
        id: create_release_files
        run: |
          printf -v red '\033[0;31m'
          printf -v yellow '\033[0;33m'
          printf -v green '\033[0;32m'
          printf -v bold '\033[1m'
          printf -v reset '\033[0m'

          echo "::group::Generating release files"
          echo "${yellow}${bold}Release Name:${reset} ${RELEASE_NAME}"
          mkdir -p "releases/${RELEASE_NAME}"

          echo "${yellow}Generating release definition...${reset}"
          releaseDefinitionOutput=$(sfp releasedefinition generate \
            --gitref "${GIT_REF}" \
            --configfile "${PATH_TO_CONFIG_FILE}" \
            --releasename "${RELEASE_NAME}" \
            --branchname "${BRANCH_NAME}" \
            --loglevel "${SFP_LOG_LEVEL}" \
            --nopush)
          echo "$releaseDefinitionOutput"
          # Remove ANSI color codes from output, extract the release information from output and save to file
          # TODO: See if we can get the generated file instead of parsing the output (like we do for changelog)
          # Hopefully flxbl will provide a better way to get this in the future.
          echo "$releaseDefinitionOutput" | sed 's/\x1b\[[0-9;]*m//g' | awk '/^Release:/,0' > "releases/${RELEASE_NAME}/${RELEASE_NAME}.yml"

          echo "${yellow}Generating changelog...${reset}"
          changelogOutput=$(sfp changelog generate \
            --branchname main \
            --releasename "${RELEASE_NAME}" \
            --workitemfilter "${WORKITEM_FILTER}" \
            --directory changelog \
            --nopush 2>&1)
          echo "$changelogOutput"
          # The path to the generated changelog is not always the same, so we need to extract it from the output.
          # Hopefully flxbl will provide a better way to get this in the future.
          path=$(echo "$changelogOutput" | grep -oP 'Copying the repository to \K[^ ]+' | head -1)

          # Copy changelog files to release directory
          # Give a warning if the path is not set or the directory does not exist, no need to fail over missing changelog.
          if [ -n "$path" ] && [ -d "$path/changelog" ]; then
            cp "$path/changelog"/* "releases/${RELEASE_NAME}/"
          else
            echo "::warning::Path not set or directory does not exist. Tried looking for $path/changelog."
          fi

          # Not needed for now.
          # # Check if files were created and create a commaseparated list of them e.g. "releases/release_1/file1.md,releases/release_1/file2.yml"
          # files=$(find "releases/${RELEASE_NAME}" -maxdepth 1 -type f \( -name "*.md" -o -name "*.yml" \) -printf '%p,' | sed 's/,$//')
          # if [ -z "$files" ]; then
          #   echo "::warning::No files found."
          # else
          #   echo "${yellow}${bold}Files created:${reset} $files"
          # fi
          # echo "files=$files" >> "$GITHUB_OUTPUT"

          # git config --global --add safe.directory "$GITHUB_WORKSPACE"
          echo "::endgroup::"

      # Not needed for now.
      # - name: Commit Release Files
      #   if: steps.build.outputs.artifactsFound == 'true'
      #   uses: navikt/sf-platform/.github/actions/commitFiles@ff060cd07e4bcb96889765a5a4a08fcaf3f8b920
      #   with:
      #     files: ${{ steps.create_release_files.outputs.files }}
      #     commitMessage: 'Release files for "${{ env.RELEASE_NAME }}"'
      #     token: ${{ env.GH_AUTH_TOKEN }}

      - name: Create Github Release
        if: steps.build.outputs.artifactsFound == 'true'
        shell: bash {0} # Use bash without -e to respect set +e
        run: |
          set +e  # Disable exit-on-error to allow custom error handling
          printf -v red '\033[0;31m'
          printf -v yellow '\033[0;33m'
          printf -v green '\033[0;32m'
          printf -v bold '\033[1m'
          printf -v reset '\033[0m'

          echo "::group::Creating GitHub Release"
          changelog_file="releases/${RELEASE_NAME}/Release-Changelog.md"
          # Use the changelog file as the release body if it exists and is not empty, if not just add the release name as the body
          if [ -f "$changelog_file" ] && [ -s "$changelog_file" ]; then
            body=$(jq -R -s '.' < "$changelog_file")
          else
            echo "::warning::Changelog file $changelog_file is missing or empty, using default body"
            body=$(jq -R -s '.' <<< "Release ${RELEASE_NAME}")
          fi

          json_payload=$(jq -n \
            --arg tag "$RELEASE_NAME" \
            --arg name "$RELEASE_NAME" \
            --argjson body "$body" \
            '{tag_name: $tag, name: $name, body: $body}')

          # Create the release and get the response with the http status code on the last line
          response=$(curl -s -w "\n%{http_code}" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${GH_AUTH_TOKEN}" \
            -d "$json_payload" \
            https://api.github.com/repos/${{ github.repository }}/releases)

          status=$(echo "$response" | tail -n1)
          body=$(echo "$response" | sed '$d')

          # Check if the release was created successfully
          if [ "$status" -ne 201 ]; then
            echo "${red}Failed to create release (HTTP $status)${reset}"
            echo "Response: $body"
            exit 1
          fi

          # Extract the upload URL from the response so that we can upload the release files
          UPLOAD_URL=$(echo "$body" | jq -r '.upload_url | sub("\\{.*$"; "") // ""')
          if [ -z "$UPLOAD_URL" ]; then
            echo "${red}Failed to extract upload_url from response${reset}"
            echo "Response: $body"
            exit 1
          fi
          echo "Release created successfully. Upload URL: $UPLOAD_URL"
          echo "::endgroup::"

          echo "::group::Uploading Release Files"
          success_count=0
          failure_count=0
          max_retries=2 # Number of times to retry uploading a file

          for file in releases/${RELEASE_NAME}/*; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              echo "${yellow}Uploading $filename${reset}"
              
              # Skip files larger than 10MB
              if [ $(stat -c %s "$file") -gt 10485760 ]; then
                echo "::warning::File $filename is larger than 10MB, skipping upload"
                continue;
              fi
              
              attempt=0
              success=false

              # Try to upload the file and retry if it fails
              while [ $attempt -lt $max_retries ] && [ "$success" = false ]; do
                # Upload the file and get the response with the http status code on the last line
                upload_response=$(curl -s -w "\n%{http_code}" \
                  -H "Authorization: token ${GH_AUTH_TOKEN}" \
                  -H "Content-Type: application/octet-stream" \
                  --data-binary @"$file" \
                  "$UPLOAD_URL?name=$filename")
                curl_exit_code=$? # Save the exit code of the curl command
                upload_status=$(echo "$upload_response" | tail -n1) # Get the http status code
                upload_body=$(echo "$upload_response" | sed '$d') # Get the response body

                # Check if the upload was successful
                if [ $curl_exit_code -ne 0 ]; then
                  echo "${red}curl command failed with exit code $curl_exit_code${reset}"
                  echo "Upload Response: $upload_response"
                  ((attempt++))
                  [ $attempt -lt $max_retries ] && sleep 2
                elif [ "$upload_status" -eq 201 ]; then
                  echo "${green}Successfully uploaded $filename (HTTP $upload_status)${reset}"
                  success=true
                  ((success_count++))
                else
                  echo "${red}Upload attempt $((attempt + 1)) failed for $filename (HTTP $upload_status)${reset}"
                  echo "Upload Response: $upload_body"
                  ((attempt++))
                  [ $attempt -lt $max_retries ] && sleep 2
                fi
              done

              if [ "$success" = false ]; then
                echo "::warning::Failed to upload $filename after $max_retries attempts"
                ((failure_count++))
              fi
            else
              echo "Skipping $file - not a regular file"
            fi
          done
          echo "::endgroup::"

          echo "::group::Upload Summary"
          echo "${green}Uploaded ${yellow}${bold}$success_count${reset}${green} files successfully${reset}"

          # Print a warning if some uploads failed
          if [ $failure_count -gt 0 ]; then
            echo "${red}Failed to upload ${yellow}${bold}$failure_count${reset}${red} files${reset}"
            echo "::warning::Some uploads failed, check logs for details"
          fi

          # Fail the job if no files were uploaded successfully
          if [ $success_count -eq 0 ] && [ $failure_count -gt 0 ]; then
            echo "::error::${red}No files uploaded successfully${reset}"
            exit 1
          fi
          echo "::endgroup::"

      # Upload build artifacts and logs if present
      - name: Upload Artifacts and Logs
        if: steps.build.outputs.artifactsFound == 'true'
        uses: navikt/sf-platform/.github/actions/uploadWorkflowArtifactsAndLogs@841af76d24d68afd9f885e5027be8b0753ee054e
        with:
          artifactName: "build-artifacts"
          uploadArtifacts: true
          logName: "build-logs"
          publishLogs: true
