name: "Release"
on:
  workflow_call:
    inputs:
      release_tag:
        type: string
        description: "Optional: Specify a release tag to use instead of the latest"
        default: ""
        required: false
      loglevel:
        type: string
        description: "Optional: Specify the log level"
        required: false
    secrets:
      SF_DEVHUB_URL:
        required: true
      TARGET_ORG_URL:
        required: true
jobs:
  release:
    runs-on: ubuntu-latest
    container: ghcr.io/flxbl-io/sfp:${{ vars.SFP_CONTAINER_VERSION || 'latest' }}
    permissions:
      contents: read
      packages: read
    env:
      SFP_LOG_LEVEL: ${{ inputs.loglevel || vars.SFP_LOG_LEVEL || 'INFO' }}
      GH_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SCOPE: ${{ github.repository_owner }}
      REPO: ${{ github.repository }}
      INPUT_RELEASE_TAG: ${{ inputs.release_tag  }}
      RELEASE_NAME_PREFIX: ${{ vars.RELEASE_NAME_PREFIX || 'sf' }}
    steps:
      - name: Authenticate Node
        uses: actions/setup-node@v4
        with:
          registry-url: "https://npm.pkg.github.com"

      # Sets up Salesforce CLI authentication for the DevHub
      - name: Authenticate DevHub
        uses: navikt/sf-gha-authenticateOrg@da2f995ee865e05111574719abfc5ba12b459f0c
        with:
          auth-url: ${{ secrets.SF_DEVHUB_URL }}
          alias: "devhub"
          setDefaultDevhubUsername: "true"

      # Sets up Salesforce CLI authentication for the DevHub
      - name: Authenticate Target Org
        uses: navikt/sf-gha-authenticateOrg@da2f995ee865e05111574719abfc5ba12b459f0c
        with:
          auth-url: ${{ secrets.TARGET_ORG_URL }}
          alias: "targetorg"

      - name: Determine release tag
        id: release
        run: |
          if [ -z "${INPUT_RELEASE_TAG}" ]; then
            latest_tag=$(curl -s \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: token ${GH_AUTH_TOKEN}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              https://api.github.com/repos/${REPO}/releases/latest \
            | jq -r '.tag_name')
            
            echo "Latest release tag: $latest_tag"
          else
            latest_tag=${INPUT_RELEASE_TAG}
          fi

          if [ -z "$latest_tag" ]; then
            echo "::error::No latest release found for repository ${REPO}"
            exit 1
          fi

          latest_tag=$(echo "$latest_tag" | tr -d '\n')

          if [[ ! "$latest_tag" =~ ^$RELEASE_NAME_PREFIX_[0-9]{13,14}$ ]]; then
            echo "::error::Invalid release name format: $latest_tag. Expected format: $RELEASE_NAME_PREFIX_<timestamp>"
            exit 1
          fi

          echo "releaseTag="$latest_tag" >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          ref: ${{ steps.release.outputs.releaseTag }}
          persist-credentials: false

      - name: Get release asset URL
        id: asset
        run: |
          asset_url=$(curl -s \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: token ${GH_AUTH_TOKEN}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${REPO}/releases/tags/${RELEASE_TAG} \
          | jq -r '.assets[] 
          | select(.name | test("sf-platform_.*\\.yml")) 
          | .browser_download_url')

          if [ -z "$asset_url" ]; then
            echo "::error::No asset matching 'sf-platform_.*\\.yml' found for release ${RELEASE_TAG}"
            exit 1
          fi
          echo "url=$asset_url" >> $GITHUB_OUTPUT
        env:
          RELEASE_TAG: "${{ steps.release.outputs.releaseTag }}"

      - name: Download release asset
        run: |
          curl -L -o release_file.yml \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: token ${GH_AUTH_TOKEN}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            ${ASSET_URL}

          echo "File contents:"
          cat release_file.yml
        env:
          ASSET_URL: "${{ steps.asset.outputs.url }}"
          RELEASE_TAG: "${{ steps.release.outputs.releaseTag }}"

      - name: Release to Org
        run: |
          sfp release --releasedefinition release_file.yml \
            --targetorg targetorg \
            --devhubalias devhub \
            --npm \
            --scope ${SCOPE} \
            --loglevel ${SFP_LOG_LEVEL}
